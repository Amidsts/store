{"version":3,"file":"signin.spec.js","sourceRoot":"src/","sources":["__tests__/components/Auth/controllers/signin.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAErC,uDAIyB;AACzB,2DAA4D;AAC5D,wFAA+D;AAC/D,kDAAgF;AAChF,qEAAuD;AAEvD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,IAAI,IAAS,CAAC;IACd,SAAS,CAAC,GAAS,EAAE;QACnB,MAAM,IAAA,wBAAkB,GAAE,CAAC;QAC3B,IAAA,2BAAqB,GAAE,CAAC;QACxB,IAAA,sBAAgB,GAAE,CAAC;QAEnB,IAAI,GAAG,MAAM,IAAA,2BAAY,GAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC9C,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAS,EAAE;QAClD,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAEnE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,aAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;YACvE,KAAK,EAAE,gCAAiB,CAAC,KAAK;YAC9B,QAAQ,EAAE,2BAAY,CAAC,QAAQ;SAChC,CAAC,CAAC;QAEH,MAAM,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAS,EAAE;QAC3D,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAEnE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,aAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC;YACvE,KAAK,EAAE,2BAAY,CAAC,KAAK;YACzB,QAAQ,EAAE,gCAAiB,CAAC,QAAQ;SACrC,CAAC,CAAC;QAEH,MAAM,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAS,EAAE;QAC1D,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAEnE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,aAAG,CAAC;aACxC,IAAI,CAAC,iBAAiB,CAAC;aACvB,IAAI,CAAC,EAAE,KAAK,EAAE,2BAAY,CAAC,KAAK,EAAE,QAAQ,EAAE,2BAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QAExE,MAAM,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC1D,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC,CAAA,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAS,EAAE;QAClB,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,MAAM,oBAAS,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,IAAA,uBAAY,GAAE,CAAC;IACvB,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["const request = require(\"supertest\");\n\nimport app, {\n  initializeDatabase,\n  initializeMiddlewares,\n  initializeRoutes,\n} from \"../../../../app\";\nimport { closeMongoDb } from \"../../../../configs/database\";\nimport AuthModel from \"../../../../components/Auth/auth.model\";\nimport { saveTestData, testUserData, wrongTestUserData } from \"../authTestData\";\nimport * as response from \"../../../../utils/response\";\n\ndescribe(\"user signin\", () => {\n  let user: any;\n  beforeAll(async () => {\n    await initializeDatabase();\n    initializeMiddlewares();\n    initializeRoutes();\n\n    user = await saveTestData().userAuth.save();\n  });\n\n  it(\"Should throw error for wrong email\", async () => {\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app).post(\"/v1/auth/signin\").send({\n      email: wrongTestUserData.email,\n      password: testUserData.password,\n    });\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"Invalid login credentials\");\n    expect(status).toBe(401);\n  });\n\n  it(\"Should throw error for wrong wrong password\", async () => {\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app).post(\"/v1/auth/signin\").send({\n      email: testUserData.email,\n      password: wrongTestUserData.password,\n    });\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"Invalid login credentials\");\n    expect(status).toBe(401);\n  });\n\n  it(\"Should generate token and send user's data\", async () => {\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .post(\"/v1/auth/signin\")\n      .send({ email: testUserData.email, password: testUserData.password });\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"Login successful, Welcome ðŸ¤—\");\n    expect(status).toBe(200);\n    expect(body.data).toHaveProperty(\"token\");\n    expect(body.data).toHaveProperty(\"user\");\n    expect(typeof body.data.token).toBe(\"string\");\n    expect(typeof body.data.user).toBe(\"object\");\n  });\n\n  afterAll(async () => {\n    jest.restoreAllMocks();\n    \n    await AuthModel.deleteMany();\n    await closeMongoDb();\n  });\n});\n"]}