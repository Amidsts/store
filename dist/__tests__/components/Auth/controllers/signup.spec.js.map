{"version":3,"file":"signup.spec.js","sourceRoot":"src/","sources":["__tests__/components/Auth/controllers/signup.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAErC,uDAIyB;AACzB,2DAA4D;AAC5D,wFAA+D;AAC/D,kDAA6D;AAC7D,qEAAuD;AAEvD,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,SAAS,CAAC,GAAS,EAAE;QACnB,MAAM,IAAA,wBAAkB,GAAE,CAAC;QAC3B,IAAA,2BAAqB,GAAE,CAAC;QACxB,IAAA,sBAAgB,GAAE,CAAC;IACrB,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;QACxD,MAAM,IAAA,2BAAY,GAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrC,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAEnE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,aAAG,CAAC;aACxC,IAAI,CAAC,iBAAiB,CAAC;aACvB,IAAI,CAAC,2BAAY,CAAC,CAAC;QAEtB,MAAM,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;QACzE,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAS,EAAE;QAC/D,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAEnE,MAAM,oBAAS,CAAC,UAAU,EAAE,CAAC;QAE7B,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,aAAG,CAAC;aACxC,IAAI,CAAC,iBAAiB,CAAC;aACvB,IAAI,CAAC,2BAAY,CAAC,CAAC;QAEpB,MAAM,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAC3D,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAA,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAS,EAAE;QAClB,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,MAAM,oBAAS,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,IAAA,uBAAY,GAAE,CAAC;IACvB,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["const request = require(\"supertest\");\n\nimport app, {\n  initializeDatabase,\n  initializeMiddlewares,\n  initializeRoutes,\n} from \"../../../../app\";\nimport { closeMongoDb } from \"../../../../configs/database\";\nimport AuthModel from \"../../../../components/Auth/auth.model\";\nimport { saveTestData, testUserData } from \"../authTestData\";\nimport * as response from \"../../../../utils/response\";\n\ndescribe(\"user signup\", () => {\n  beforeAll(async () => {\n    await initializeDatabase();\n    initializeMiddlewares();\n    initializeRoutes();\n  });\n\n  it(\"Should throw error if user already exist\", async () => {\n    await saveTestData().userAuth.save();\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .post(\"/v1/auth/signup\")\n      .send(testUserData);\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"Account already exists,please Login instead\");\n    expect(status).toBe(409);\n  });\n\n  it(\"should create a new user with a success message\", async () => {\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    await AuthModel.deleteMany();\n\n    const { body, status } = await request(app)\n      .post(\"/v1/auth/signup\")\n      .send(testUserData);\n\n      expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"account created, please login\");\n    expect(status).toBe(200);\n  });\n\n  afterAll(async () => {\n    jest.restoreAllMocks();\n    \n    await AuthModel.deleteMany();\n    await closeMongoDb();\n  });\n});\n"]}