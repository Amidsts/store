{"version":3,"file":"verifyOtp.spec.js","sourceRoot":"src/","sources":["__tests__/components/Auth/controllers/verifyOtp.spec.ts"],"names":[],"mappings":"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","sourcesContent":["const request = require(\"supertest\");\n\nimport app, {\n  initializeDatabase,\n  initializeMiddlewares,\n  initializeRoutes,\n} from \"../../../../app\";\nimport { closeMongoDb } from \"../../../../configs/database\";\nimport AuthModel from \"../../../../components/Auth/auth.model\";\nimport { saveTestData, verifyOtpData } from \"../authTestData\";\nimport OtpModel from \"../../../../components/Auth/otp.model\";\nimport * as response from \"../../../../utils/response\";\n\ndescribe(\"reset user password\", () => {\n  let user: any, resetPasswordOtp: any;\n  let saveData = saveTestData();\n\n  beforeAll(async () => {\n    await initializeDatabase();\n    initializeMiddlewares();\n    initializeRoutes();\n\n    user = await saveData.userAuth.save();\n    resetPasswordOtp = await saveData.resetPasswordOtp(user._id).save();\n  });\n\n  it(\"Should throw error for wrong email\", async () => {\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n    \n    const { body, status } = await request(app)\n      .post(\"/v1/auth/verify-otp\")\n      .send({\n        ...verifyOtpData(resetPasswordOtp.code, \"reset_password\"),\n        email: \"abcdwsjg@email.com\",\n      });\n\n      expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\n      \"There was a problem at this time, pls wait some minutes\"\n    );\n    expect(status).toBe(404);\n  });\n\n  it(\"Should throw error and indicate OTP is not verified\", async () => {\n    resetPasswordOtp.isVerified = false;\n    await resetPasswordOtp.save();\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .post(\"/v1/auth/verify-otp\")\n      .send(verifyOtpData(\"khdbc1\", \"reset_password\"));\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"invalid verification code\");\n    expect(status).toBe(404);\n  });\n\n  it(\"Should throw error that otp has expired\", async () => {\n    resetPasswordOtp.isVerified = true;\n    resetPasswordOtp.expireAt = new Date(Date.now() - 1000 * 60 * 30);\n    await resetPasswordOtp.save();\n\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .post(\"/v1/auth/verify-otp\")\n      .send(verifyOtpData(resetPasswordOtp.code, \"reset_password\"));\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"OTP has expired\");\n    expect(status).toBe(400);\n  });\n\n  it(\"Should indicate that otp verification has been completed\", async () => {\n    resetPasswordOtp.expireAt = new Date(Date.now() + 1000 * 60 * 60);\n    await resetPasswordOtp.save();\n\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .post(\"/v1/auth/verify-otp\")\n      .send(verifyOtpData(resetPasswordOtp.code, \"reset_password\"));\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\n      \"otp verification completed, proceed to reset your password\"\n    );\n    expect(status).toBe(200);\n  });\n\n  afterAll(async () => {\n    jest.restoreAllMocks();\n\n    await AuthModel.deleteMany();\n    await OtpModel.deleteMany();\n    await closeMongoDb();\n  });\n});\n"]}