{"version":3,"file":"resetPassword.spec.js","sourceRoot":"src/","sources":["__tests__/components/Auth/controllers/resetPassword.spec.ts"],"names":[],"mappings":"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","sourcesContent":["const request = require(\"supertest\");\n\nimport app, {\n  initializeDatabase,\n  initializeMiddlewares,\n  initializeRoutes,\n} from \"../../../../app\";\nimport { closeMongoDb } from \"../../../../configs/database\";\nimport AuthModel from \"../../../../components/Auth/auth.model\";\nimport {\n  resetPasswordData,\n  saveTestData,\n  wrongResetPasswordData,\n} from \"../authTestData\";\nimport OtpModel from \"../../../../components/Auth/otp.model\";\nimport * as response from \"../../../../utils/response\";\n\ndescribe(\"reset user password\", () => {\n  let user: any, resetPasswordOtp: any;\n  let saveData = saveTestData();\n  beforeAll(async () => {\n    await initializeDatabase();\n    initializeMiddlewares();\n    initializeRoutes();\n\n    user = await saveData.userAuth.save();\n    resetPasswordOtp = await saveData.resetPasswordOtp(user._id).save();\n  });\n\n  it(\"Should throw error for wrong email\", async () => {\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .patch(\"/v1/auth/reset-password\")\n      .send(wrongResetPasswordData);\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"Invalid login credentials\");\n    expect(status).toBe(401);\n  });\n\n  it(\"Should throw error and indicate OTP is not verified\", async () => {\n    resetPasswordOtp.isVerified = false;\n    await resetPasswordOtp.save();\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .patch(\"/v1/auth/reset-password\")\n      .send(resetPasswordData(resetPasswordOtp.code));\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"pls, verify password otp\");\n    expect(status).toBe(400);\n  });\n\n  it(\"Should indicate that password has been changed successfully\", async () => {\n    resetPasswordOtp.isVerified = true;\n    await resetPasswordOtp.save();\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .patch(\"/v1/auth/reset-password\")\n      .send(resetPasswordData(resetPasswordOtp.code));\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"password changed successfully, pls log in\");\n    expect(status).toBe(200);\n  });\n\n  afterAll(async () => {\n    jest.restoreAllMocks();\n\n    await AuthModel.deleteMany();\n    await OtpModel.deleteMany();\n    await closeMongoDb();\n  });\n});\n"]}