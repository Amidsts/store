{"version":3,"file":"forgotpassword.spec.js","sourceRoot":"src/","sources":["__tests__/components/Auth/controllers/forgotpassword.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAErC,uDAIyB;AACzB,2DAA4D;AAC5D,wFAA+D;AAC/D,kDAAgF;AAChF,sFAA6D;AAC7D,kFAAoE;AACpE,qEAAuD;AAEvD,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,QAAa,CAAC;IAClB,SAAS,CAAC,GAAS,EAAE;QACnB,MAAM,IAAA,wBAAkB,GAAE,CAAC;QAC3B,IAAA,2BAAqB,GAAE,CAAC;QACxB,IAAA,sBAAgB,GAAE,CAAC;QAEnB,MAAM,IAAA,2BAAY,GAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IACvC,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAS,EAAE;QAClD,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAEnE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,aAAG,CAAC;aACxC,IAAI,CAAC,0BAA0B,CAAC;aAChC,IAAI,CAAC;YACJ,KAAK,EAAE,gCAAiB,CAAC,KAAK;SAC/B,CAAC,CAAC;QAEL,MAAM,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;QACxD,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACtD,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAEnE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,aAAG,CAAC;aACxC,IAAI,CAAC,0BAA0B,CAAC;aAChC,IAAI,CAAC;YACJ,KAAK,EAAE,2BAAY,CAAC,KAAK;SAC1B,CAAC,CAAC;QAEL,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACxC,MAAM,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;QAC1E,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAA,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAS,EAAE;QAClB,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,MAAM,oBAAS,CAAC,UAAU,EAAE,CAAC;QAC7B,MAAM,mBAAQ,CAAC,UAAU,EAAE,CAAC;QAC5B,MAAM,IAAA,uBAAY,GAAE,CAAC;IACvB,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["const request = require(\"supertest\");\n\nimport app, {\n  initializeDatabase,\n  initializeMiddlewares,\n  initializeRoutes,\n} from \"../../../../app\";\nimport { closeMongoDb } from \"../../../../configs/database\";\nimport AuthModel from \"../../../../components/Auth/auth.model\";\nimport { saveTestData, testUserData, wrongTestUserData } from \"../authTestData\";\nimport OtpModel from \"../../../../components/Auth/otp.model\";\nimport * as sendEmail from \"../../../../configs/mail/mailTemplates\";\nimport * as response from \"../../../../utils/response\";\n\ndescribe(\"user forgot password test\", () => {\n  let userAuth: any;\n  beforeAll(async () => {\n    await initializeDatabase();\n    initializeMiddlewares();\n    initializeRoutes();\n\n    await saveTestData().userAuth.save();\n  });\n\n  it(\"Should throw error for wrong email\", async () => {\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .post(\"/v1/auth/forgot-password\")\n      .send({\n        email: wrongTestUserData.email,\n      });\n\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"Invalid login credentials\");\n    expect(status).toBe(401);\n  });\n\n  it(\"Should send otp code to the user's email\", async () => {\n    const sendEmailSpy = jest.spyOn(sendEmail, \"default\");\n    const responseHandlerSpy = jest.spyOn(response, \"responseHandler\");\n\n    const { body, status } = await request(app)\n      .post(\"/v1/auth/forgot-password\")\n      .send({\n        email: testUserData.email,\n      });\n\n    expect(sendEmailSpy).toHaveBeenCalled();\n    expect(responseHandlerSpy).toHaveBeenCalled();\n    expect(body.message).toBe(\"verification code has been sent to your mail\");\n    expect(status).toBe(200);\n  });\n\n  afterAll(async () => {\n    jest.restoreAllMocks();\n\n    await AuthModel.deleteMany();\n    await OtpModel.deleteMany();\n    await closeMongoDb();\n  });\n});\n"]}