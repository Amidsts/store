{"version":3,"file":"requireAuth.js","sourceRoot":"src/","sources":["middlewares/requireAuth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,gDAAoD;AACpD,gFAAuD;AACvD,+EAAqD;AAErD,MAAM,qBAAqB,GAAG,CAC5B,GAAa,EACb,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACjB,OAAO,IAAA,0BAAe,EAAC;YACrB,GAAG;YACH,OAAO,EAAE,4BAA4B;YACrC,MAAM,EAAE,GAAG;SACZ,CAAC,CAAC;IACL,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;IAElC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,oBAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAA,0BAAe,EAAC;gBACrB,GAAG;gBACH,OAAO,EAAE,sBAAsB;gBAC/B,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,oBAAQ,CAAC,OAAO,CAAC;YACtC,IAAI,EAAE,IAAI,CAAC,GAAG;SACf,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,IAAA,0BAAe,EAAC;gBACrB,GAAG;gBACH,OAAO,EAAE,sBAAsB;gBAC/B,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;QAED,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QAChB,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACxB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QAEhB,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,IAAA,0BAAe,EAAC;YACrB,GAAG;YACH,OAAO,EAAE,sBAAsB;YAC/B,MAAM,EAAE,GAAG;YACX,GAAG;SACJ,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAA,CAAC;AACF,kBAAe,qBAAqB,CAAC","sourcesContent":["import { NextFunction, Response } from \"express\";\n\nimport { IRequest } from \"../utils/types\";\nimport { responseHandler } from \"../utils/response\";\nimport UserModel from \"../components/Users/user.model\";\nimport UserAuth from \"../components/Auth/auth.model\";\n\nconst requireAuthMiddleware = async (\n  req: IRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  if (!req.decoded) {\n    return responseHandler({\n      res,\n      message: \"authentication is required\",\n      status: 401,\n    });\n  }\n\n  const { ref, role } = req.decoded;\n\n  try {\n    const user = await UserModel.findById(ref);\n    if (!user) {\n      return responseHandler({\n        res,\n        message: \"authorization failed\",\n        status: 401,\n      });\n    }\n\n    const userAuth = await UserAuth.findOne({\n      User: user._id,\n    });\n    if (!userAuth) {\n      return responseHandler({\n        res,\n        message: \"authorization failed\",\n        status: 401,\n      });\n    }\n\n    req.user = user;\n    req.userAuth = userAuth;\n    req.role = role;\n\n    return next();\n  } catch (err) {\n    return responseHandler({\n      res,\n      message: \"Authentication error\",\n      status: 401,\n      err,\n    });\n  }\n};\nexport default requireAuthMiddleware;\n"]}