{"version":3,"file":"searchProduct.js","sourceRoot":"src/","sources":["components/Products/controllers/searchProduct.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,sDAA0D;AAG1D,qEAA4C;AAC5C,uEAAqD;AAGrD,SAAe,aAAa,CAAC,GAAa,EAAE,GAAa;;QACvD,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,GAAwC,GAAG,CAAC,KAAK,CAAC;QAE7E,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAA,kBAAc,EAAC,GAAG,CAAC,CAAC;QAClD,IAAI,CAAC;YACH,IAAI,SAAS,EAAE,CAAC;gBACd,MAAM,OAAO,GAAG,MAAM,uBAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBACvD,IAAI,CAAC,OAAO,EAAE,CAAC;oBACb,OAAO,IAAA,0BAAe,EAAC;wBACrB,GAAG;wBACH,OAAO,EAAE,wBAAwB;wBACjC,MAAM,EAAE,GAAG;qBACZ,CAAC,CAAC;gBACL,CAAC;gBAED,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,OAAO,EAAE,gCAAgC;oBACzC,IAAI,EAAE,OAAO;iBACd,CAAC,CAAC;YACL,CAAC;YAED,IAAI,MAAM,EAAE,CAAC;gBACX,MAAM,QAAQ,GAAG,MAAM,uBAAY,CAAC,IAAI,CACtC;oBACE,IAAI,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE;iBACxC,EACD,IAAI,EACJ,iBAAiB,CAClB,CAAC;gBAEF,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,OAAO,EAAE,iCAAiC;oBAC1C,IAAI,EAAE;wBACJ,QAAQ;qBACT;iBACF,CAAC,CAAC;YACL,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,uBAAY,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAEtE,OAAO,IAAA,0BAAe,EAAC;gBACrB,GAAG;gBACH,OAAO,EAAE,iCAAiC;gBAC1C,IAAI,EAAE;oBACJ,QAAQ;iBACT;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,0BAAe,EAAC;gBACd,GAAG;gBACH,GAAG;gBACH,OAAO,EAAE,uBAAuB;gBAChC,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,aAAa,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { responseHandler } from \"../../../utils/response\";\nimport { IRequest } from \"../../../utils/types\";\nimport { z } from \"zod\";\nimport ProductModel from \"../product.model\";\nimport handlePaginate from \"../../../utils/paginate\";\nimport { searchProductSchema } from \"../product.validators\";\n\nasync function searchProduct(req: IRequest, res: Response) {\n  const { productId, search }: z.infer<typeof searchProductSchema> = req.query;\n\n  const { paginationOptions } = handlePaginate(req);\n  try {\n    if (productId) {\n      const product = await ProductModel.findById(productId);\n      if (!product) {\n        return responseHandler({\n          res,\n          message: \"product does not exist\",\n          status: 400,\n        });\n      }\n\n      return responseHandler({\n        res,\n        message: \"product retrieved successfully\",\n        data: product,\n      });\n    }\n\n    if (search) {\n      const products = await ProductModel.find(\n        {\n          name: { $regex: search, $options: \"i\" },\n        },\n        null,\n        paginationOptions\n      );\n\n      return responseHandler({\n        res,\n        message: \"products retrieved successfully\",\n        data: {\n          products,\n        },\n      });\n    }\n\n    const products = await ProductModel.find({}, null, paginationOptions);\n\n    return responseHandler({\n      res,\n      message: \"products retrieved successfully\",\n      data: {\n        products,\n      },\n    });\n  } catch (err) {\n    responseHandler({\n      res,\n      err,\n      message: \"Internal Server Error\",\n      status: 500,\n    });\n  }\n}\n\nexport default searchProduct;\n"]}