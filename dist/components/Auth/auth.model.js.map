{"version":3,"file":"auth.model.js","sourceRoot":"src/","sources":["components/Auth/auth.model.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,uCAA0D;AAC1D,oDAA4B;AAC5B,gEAA+B;AAC/B,6CAA0C;AAE1C,4DAAsC;AAGtC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,iBAAS,CAAC;AAiB9C,MAAM,UAAU,GAAG,IAAI,iBAAM,CAC3B;IACE,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IAED,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;QACvB,OAAO,EAAE,MAAM;KAChB;IACD,UAAU,EAAE;QACV,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC;QAC7B,OAAO,EAAE,QAAQ;KAClB;CACF,EACD,EAAE,UAAU,EAAE,IAAI,EAAE,CACrB,CAAC;AAEF,UAAU,CAAC,OAAO,CAAC,eAAe,GAAG,UAAU,QAAgB;IAC7D,OAAO,gBAAM,CAAC,WAAW,CAAC,QAAQ,GAAG,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,UAAU,CAAC,OAAO,CAAC,aAAa,GAAG,CAAC,EAClC,IAAI,EACJ,SAAS,GAAG,WAAW,CAAC,aAAa,EACrC,QAAQ,GAAG,KAAK,GAKjB,EAAU,EAAE,CACX,sBAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,SAAS,EAAE;IACpC,SAAS;IACT,MAAM,EAAE,SAAS,iBAAS,CAAC,WAAW,EAAE;IACxC,QAAQ,EAAE,GAAG,QAAQ,OAAO;CAC7B,CAAC,CAAC;AAEL,UAAU,CAAC,OAAO,CAAC,SAAS,GAAG,GAAW,EAAE,CAAC,IAAA,yBAAW,EAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAE5E,UAAU,CAAC,GAAG,CAAQ,MAAM,EAAE,UAAgB,IAAI;;QAChD,IAAI,CAAC;YACH,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;gBAChC,MAAM,IAAI,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBAE1D,MAAM,cAAc,GAAG,MAAM,gBAAM,CAAC,IAAI,CACtC,IAAI,CAAC,QAAQ,GAAG,UAAU,EAC1B,IAAI,CACL,CAAC;gBACF,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;YACjC,CAAC;YAED,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC;IACH,CAAC;CAAA,CAAC,CAAC;AAEH,MAAM,SAAS,GAAG,IAAA,gBAAK,EAAQ,MAAM,EAAE,UAAU,CAAC,CAAC;AAEnD,kBAAe,SAAS,CAAC","sourcesContent":["import { Schema, Document, model, Types } from \"mongoose\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { randomBytes } from \"node:crypto\";\n\nimport appConfig from \"../../configs\";\nimport { IToken } from \"../../utils/types\";\n\nconst { authConfigs, hashPepper } = appConfig;\n\nexport interface IAuth extends Document {\n  firstName: string;\n  lastName: string;\n  fullName: string;\n  email: string;\n  phoneNo: string;\n  password: string;\n  role: \"user\" | \"admin\";\n  acctStatus: \"active\" | \"suspended\";\n\n  comparePassword: (password: string) => any;\n  generateToken: (token: { [key: string]: any }) => any;\n  randomOTP: () => any;\n}\n\nconst authSchema = new Schema<IAuth>(\n  {\n    firstName: {\n      type: String,\n      required: true,\n    },\n    lastName: {\n      type: String,\n      required: true,\n    },\n    fullName: {\n      type: String,\n      required: true,\n    },\n    email: {\n      type: String,\n      required: true,\n    },\n    phoneNo: {\n      type: String,\n      required: true,\n    },\n\n    password: {\n      type: String,\n      required: true,\n    },\n    role: {\n      type: String,\n      enum: [\"admin\", \"user\"],\n      default: \"user\",\n    },\n    acctStatus: {\n      type: String,\n      enum: [\"active\", \"suspended\"],\n      default: \"active\",\n    },\n  },\n  { timestamps: true }\n);\n\nauthSchema.methods.comparePassword = function (password: string): boolean {\n  return bcrypt.compareSync(password + hashPepper, this.password);\n};\n\nauthSchema.methods.generateToken = ({\n  data,\n  expiresIn = authConfigs.tokenLifeSpan,\n  audience = \"web\",\n}: {\n  data: IToken;\n  expiresIn?: number;\n  audience?: \"web\";\n}): string =>\n  jwt.sign(data, authConfigs.jwtSecret, {\n    expiresIn,\n    issuer: `store-${appConfig.environment}`,\n    audience: `${audience}-user`,\n  });\n\nauthSchema.methods.randomOTP = (): string => randomBytes(3).toString(\"hex\");\n\nauthSchema.pre<IAuth>(\"save\", async function (next) {\n  try {\n    if (this.isModified(\"password\")) {\n      const salt = await bcrypt.genSalt(authConfigs.saltRounds);\n\n      const hashedPassword = await bcrypt.hash(\n        this.password + hashPepper,\n        salt\n      );\n      this.password = hashedPassword;\n    }\n\n    next();\n  } catch (err) {\n    return next(err);\n  }\n});\n\nconst AuthModel = model<IAuth>(\"Auth\", authSchema);\n\nexport default AuthModel;\n"]}