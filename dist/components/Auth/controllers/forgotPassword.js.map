{"version":3,"file":"forgotPassword.js","sourceRoot":"src/","sources":["components/Auth/controllers/forgotPassword.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,sDAA0D;AAE1D,6DAAoC;AACpC,+DAAsC;AACtC,wFAA4D;AAE5D,SAAe,cAAc,CAAC,GAAa,EAAE,GAAa;;QACxD,MAAM,EAAE,KAAK,EAAE,GAAyC,GAAG,CAAC,IAAI,CAAC;QAEjE,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,2BAA2B;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,gBAAgB,GAAG,YAAY,CAAC,SAAS,EAAE,CAAC;YAElD,MAAM,IAAI,mBAAQ,CAAC;gBACjB,IAAI,EAAE,YAAY,CAAC,GAAG;gBACtB,IAAI,EAAE,gBAAgB;gBACtB,QAAQ,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;gBAC/C,OAAO,EAAE,gBAAgB;gBACzB,UAAU,EAAE,KAAK;aAClB,CAAC,CAAC,IAAI,EAAE,CAAC;YAGV,MAAM,IAAA,uBAAS,EACb,qBAAqB,EACrB,YAAY,CAAC,KAAK,EAClB,YAAY,CAAC,QAAQ,EACrB,gBAAgB,CACjB,CAAC;YAEF,OAAO,IAAA,0BAAe,EAAC;gBACrB,GAAG;gBACH,OAAO,EAAE,8CAA8C;aACxD,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,0BAAe,EAAC;gBACd,GAAG;gBACH,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { z } from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport { responseHandler } from \"../../../utils/response\";\nimport { forgotPasswordSchema } from \"../auth.validators\";\nimport OtpModel from \"../otp.model\";\nimport AuthModel from \"../auth.model\";\nimport sendEmail from \"../../../configs/mail/mailTemplates\";\n\nasync function forgotPassword(req: IRequest, res: Response) {\n  const { email }: z.infer<typeof forgotPasswordSchema> = req.body;\n\n  try {\n    const existingUser = await AuthModel.findOne({ email });\n    if (!existingUser) {\n      return responseHandler({\n        res,\n        status: 401,\n        message: \"Invalid login credentials\",\n      });\n    }\n\n    const verificationCode = existingUser.randomOTP();\n\n    await new OtpModel({\n      User: existingUser._id,\n      code: verificationCode,\n      expireAt: new Date(Date.now() + 1000 * 60 * 30),\n      purpose: \"reset_password\",\n      isVerified: false,\n    }).save();\n\n\n    await sendEmail(\n      \"forgotPasswordEmail\",\n      existingUser.email,\n      existingUser.fullName,\n      verificationCode\n    );\n\n    return responseHandler({\n      res,\n      message: \"verification code has been sent to your mail\",\n    });\n  } catch (err) {\n    responseHandler({\n      res,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default forgotPassword;\n"]}