{"version":3,"file":"verifyOtp.js","sourceRoot":"src/","sources":["components/Auth/controllers/verifyOtp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,sDAGiC;AACjC,qEAA6D;AAC7D,+DAAsC;AACtC,uCAAwC;AAExC,SAAe,SAAS,CAAC,GAAa,EAAE,GAAa;;QACnD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,GAAoC,GAAG,CAAC,IAAI,CAAC;QAE9E,MAAM,OAAO,GAAG,MAAM,IAAA,uBAAY,GAAE,CAAC;QACrC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAC3B,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACtE,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,OAAO,IAAA,mCAAwB,EAAC;oBAC9B,GAAG;oBACH,OAAO;oBACP,OAAO,EAAE,yDAAyD;oBAClE,MAAM,EAAE,GAAG;iBACZ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CACvE,OAAO,CACR,CAAC;YACF,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,OAAO,IAAA,mCAAwB,EAAC;oBAC9B,GAAG;oBACH,OAAO;oBACP,OAAO,EAAE,yDAAyD;oBAClE,MAAM,EAAE,GAAG;iBACZ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,qBAAQ,CAAC,OAAO,CAAC;gBACtC,IAAI,EAAE,SAAS,CAAC,GAAG;gBACnB,IAAI;gBACJ,OAAO,EAAE,UAAU;aACpB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACpB,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,OAAO,IAAA,mCAAwB,EAAC;oBAC9B,GAAG;oBACH,OAAO;oBACP,OAAO,EAAE,2BAA2B;oBACpC,MAAM,EAAE,GAAG;iBACZ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YAEvB,IAAI,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAC5B,OAAO,IAAA,mCAAwB,EAAC;oBAC9B,GAAG;oBACH,OAAO;oBACP,OAAO,EAAE,iBAAiB;oBAC1B,MAAM,EAAE,GAAG;iBACZ,CAAC,CAAC;YACL,CAAC;YAED,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;YAC3B,QAAQ,CAAC,QAAQ,GAAG,GAAG,CAAC;YACxB,MAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YAEjC,OAAO,IAAA,oCAAyB,EAAC;gBAC/B,GAAG;gBACH,OAAO;gBACP,OAAO,EAAE,4DAA4D;aACtE,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,mCAAwB,EAAC;gBACvB,GAAG;gBACH,OAAO;gBACP,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,SAAS,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { z } from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport { verifyOtpSchema } from \"../auth.validators\";\nimport {\n  abortSessionWithResponse,\n  commitSessionWithResponse,\n} from \"../../../utils/response\";\nimport UserModel, { OtpModel } from \"../../Users/user.model\";\nimport AuthModel from \"../auth.model\";\nimport { startSession } from \"mongoose\";\n\nasync function verifyOtp(req: IRequest, res: Response) {\n  const { code, email, otpPurpose }: z.infer<typeof verifyOtpSchema> = req.body;\n\n  const session = await startSession();\n  session.startTransaction();\n  try {\n    const userExist = await UserModel.findOne({ email }).session(session);\n    if (!userExist) {\n      return abortSessionWithResponse({\n        res,\n        session,\n        message: \"There was a problem at this time, pls wait some minutes\",\n        status: 404,\n      });\n    }\n\n    const userAuth = await AuthModel.findOne({ User: userExist._id }).session(\n      session\n    );\n    if (!userAuth) {\n      return abortSessionWithResponse({\n        res,\n        session,\n        message: \"There was a problem at this time, pls wait some minutes\",\n        status: 404,\n      });\n    }\n\n    const otpExist = await OtpModel.findOne({\n      User: userExist._id,\n      code,\n      purpose: otpPurpose,\n    }).session(session);\n    if (!otpExist) {\n      return abortSessionWithResponse({\n        res,\n        session,\n        message: \"invalid verification code\",\n        status: 404,\n      });\n    }\n\n    const now = new Date();\n\n    if (now > otpExist.expireAt) {\n      return abortSessionWithResponse({\n        res,\n        session,\n        message: \"OTP has expired\",\n        status: 400,\n      });\n    }\n\n    otpExist.isVerified = true;\n    otpExist.expireAt = now;\n    await otpExist.save({ session });\n\n    return commitSessionWithResponse({\n      res,\n      session,\n      message: \"otp verification completed, proceed to reset your password\",\n    });\n  } catch (err) {\n    abortSessionWithResponse({\n      res,\n      session,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default verifyOtp;\n"]}