{"version":3,"file":"signIn.js","sourceRoot":"src/","sources":["components/Auth/controllers/signIn.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,sDAA0D;AAE1D,+DAAsC;AAEtC,SAAe,MAAM,CAAC,GAAa,EAAE,GAAa;;QAChD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAiC,GAAG,CAAC,IAAI,CAAC;QAEnE,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAExD,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,2BAA2B;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC5C,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,OAAO,EAAE,2BAA2B;oBACpC,MAAM,EAAE,GAAG;iBACZ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,KAAK,GAAG,YAAY,CAAC,aAAa,CAAC;gBACvC,IAAI,EAAE;oBACJ,GAAG,EAAE,YAAY,CAAC,GAAG;oBACrB,IAAI,EAAE,YAAY,CAAC,IAAI;iBACxB;aACF,CAAC,CAAC;YAGP,OAAO,YAAY,CAAC,QAAQ,CAAC;YAE7B,OAAO,IAAA,0BAAe,EAAC;gBACrB,GAAG;gBACH,OAAO,EAAE,8BAA8B;gBACvC,IAAI,EAAE;oBACJ,KAAK;oBACL,IAAI,EAAE,YAAY;iBACnB;aACF,CAAC,CAAC;QACD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,0BAAe,EAAC;gBACd,GAAG;gBACH,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,MAAM,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { z } from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport { responseHandler } from \"../../../utils/response\";\nimport { signInSchema } from \"../auth.validators\";\nimport AuthModel from \"../auth.model\";\n\nasync function signIn(req: IRequest, res: Response) {\n  const { email, password }: z.infer<typeof signInSchema> = req.body;\n\n  try {\n    const existingUser = await AuthModel.findOne({ email });\n\n    if (!existingUser) {\n      return responseHandler({\n        res,\n        status: 401,\n        message: \"Invalid login credentials\",\n      });\n    }\n\n    if (!existingUser.comparePassword(password)) {\n      return responseHandler({\n        res,\n        message: \"Invalid login credentials\",\n        status: 401,\n      });\n    }\n\n    const token = existingUser.generateToken({\n      data: {\n        ref: existingUser._id,\n        role: existingUser.role,\n      },\n    });\n\n\ndelete existingUser.password;\n\nreturn responseHandler({\n  res,\n  message: \"Login successful, Welcome ðŸ¤—\",\n  data: {\n    token,\n    user: existingUser,\n  },\n});\n  } catch (err) {\n    responseHandler({\n      res,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default signIn;\n"]}