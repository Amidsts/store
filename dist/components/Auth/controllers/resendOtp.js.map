{"version":3,"file":"resendOtp.js","sourceRoot":"src/","sources":["components/Auth/controllers/resendOtp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,sDAA0D;AAE1D,qEAA6D;AAC7D,+DAAsC;AAEtC,SAAe,SAAS,CAAC,GAAa,EAAE,GAAa;;QACnD,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAoC,GAAG,CAAC,IAAI,CAAC;QACxE,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,qBAAqB;iBAC/B,CAAC,CAAC;YACL,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YAC7D,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,OAAO,EAAE,qBAAqB;oBAC9B,MAAM,EAAE,GAAG;iBACZ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,gBAAgB,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;YAE9C,MAAM,IAAI,qBAAQ,CAAC;gBACjB,IAAI,EAAE,IAAI,CAAC,GAAG;gBACd,IAAI,EAAE,gBAAgB;gBACtB,QAAQ,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;gBAC/C,OAAO,EAAE,UAAU;aACpB,CAAC,CAAC,IAAI,EAAE,CAAC;YAEV,aAAa;YACb,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,gBAAgB,CAAC,CAAC;YAGtD,OAAO,IAAA,0BAAe,EAAC;gBACrB,GAAG;gBACH,OAAO,EAAE,8CAA8C;gBACvD,IAAI,EAAE;oBACJ,2BAA2B,EAAE,KAAK;iBACnC;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,IAAA,0BAAe,EAAC;gBACrB,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,SAAS,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { z } from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport { responseHandler } from \"../../../utils/response\";\nimport { resendOtpSchema } from \"../auth.validators\";\nimport UserModel, { OtpModel } from \"../../Users/user.model\";\nimport AuthModel from \"../auth.model\";\n\nasync function resendOtp(req: IRequest, res: Response) {\n  const { email, otpPurpose }: z.infer<typeof resendOtpSchema> = req.body;\n  try {\n    const user = await UserModel.findOne({ email });\n    if (!user) {\n      return responseHandler({\n        res,\n        status: 404,\n        message: \"invalid credentials\",\n      });\n    }\n\n    const userAuth = await AuthModel.findOne({ User: user._id });\n    if (!userAuth) {\n      return responseHandler({\n        res,\n        message: \"invalid credentials\",\n        status: 404,\n      });\n    }\n\n    const verificationCode = userAuth.randomOTP();\n\n    await new OtpModel({\n      User: user._id,\n      code: verificationCode,\n      expireAt: new Date(Date.now() + 1000 * 60 * 30),\n      purpose: otpPurpose,\n    }).save();\n\n    //send a mail\n    console.log(\"user verification:  \", verificationCode);\n    \n\n    return responseHandler({\n      res,\n      message: \"verification code has been sent to your mail\",\n      data: {\n        accountVerificationComplete: false,\n      },\n    });\n  } catch (err) {\n    return responseHandler({\n      res,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default resendOtp;\n"]}