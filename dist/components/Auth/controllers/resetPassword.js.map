{"version":3,"file":"resetPassword.js","sourceRoot":"src/","sources":["components/Auth/controllers/resetPassword.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,sDAGiC;AAEjC,qEAA6D;AAC7D,+DAAsC;AACtC,uCAAwC;AAExC,SAAe,aAAa,CAAC,GAAa,EAAE,GAAa;;QACvD,MAAM,EACJ,KAAK,EACL,eAAe,EACf,IAAI,GACL,GAAwC,GAAG,CAAC,IAAI,CAAC;QAElD,MAAM,OAAO,GAAG,MAAM,IAAA,uBAAY,GAAE,CAAC;QACrC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAC3B,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEzE,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,OAAO,IAAA,mCAAwB,EAAC;oBAC9B,GAAG;oBACH,OAAO;oBACP,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,2BAA2B;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC;gBACvC,IAAI,EAAE,YAAY,CAAC,GAAG;aACvB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACpB,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,OAAO,IAAA,mCAAwB,EAAC;oBAC9B,GAAG;oBACH,OAAO;oBACP,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,2BAA2B;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,GAAG,GAAG,MAAM,qBAAQ,CAAC,OAAO,CAAC;gBACjC,IAAI,EAAE,YAAY,CAAC,GAAG;gBACtB,OAAO,EAAE,gBAAgB;gBACzB,IAAI;gBACJ,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACpB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,OAAO,IAAA,mCAAwB,EAAC;oBAC9B,GAAG;oBACH,OAAO;oBACP,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,0BAA0B;iBACpC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,qBAAQ,CAAC,UAAU,CAAC;gBACxB,IAAI,EAAE,YAAY,CAAC,GAAG;gBACtB,OAAO,EAAE,gBAAgB;aAC1B,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEpB,QAAQ,CAAC,QAAQ,GAAG,eAAe,CAAC;YACpC,MAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YAEjC,OAAO,IAAA,oCAAyB,EAAC;gBAC/B,GAAG;gBACH,OAAO;gBACP,OAAO,EAAE,2CAA2C;aACrD,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,mCAAwB,EAAC;gBACvB,GAAG;gBACH,OAAO;gBACP,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,aAAa,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { z } from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport {\n  abortSessionWithResponse,\n  commitSessionWithResponse,\n} from \"../../../utils/response\";\nimport { resetPasswordSchema } from \"../auth.validators\";\nimport UserModel, { OtpModel } from \"../../Users/user.model\";\nimport AuthModel from \"../auth.model\";\nimport { startSession } from \"mongoose\";\n\nasync function resetPassword(req: IRequest, res: Response) {\n  const {\n    email,\n    confirmPassword,\n    code,\n  }: z.infer<typeof resetPasswordSchema> = req.body;\n\n  const session = await startSession();\n  session.startTransaction();\n  try {\n    const existingUser = await UserModel.findOne({ email }).session(session);\n\n    if (!existingUser) {\n      return abortSessionWithResponse({\n        res,\n        session,\n        status: 401,\n        message: \"Invalid login credentials\",\n      });\n    }\n\n    const userAuth = await AuthModel.findOne({\n      User: existingUser._id,\n    }).session(session);\n    if (!userAuth) {\n      return abortSessionWithResponse({\n        res,\n        session,\n        status: 401,\n        message: \"Invalid login credentials\",\n      });\n    }\n\n    const otp = await OtpModel.findOne({\n      User: existingUser._id,\n      purpose: \"reset_password\",\n      code,\n      isVerified: true,\n    }).session(session);\n    if (!otp) {\n      return abortSessionWithResponse({\n        res,\n        session,\n        status: 400,\n        message: \"pls, verify password otp\",\n      });\n    }\n\n    await OtpModel.deleteMany({\n      User: existingUser._id,\n      purpose: \"reset-password\",\n    }).session(session);\n\n    userAuth.password = confirmPassword;\n    await userAuth.save({ session });\n\n    return commitSessionWithResponse({\n      res,\n      session,\n      message: \"password changed successfully, pls log in\",\n    });\n  } catch (err) {\n    abortSessionWithResponse({\n      res,\n      session,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default resetPassword;\n"]}