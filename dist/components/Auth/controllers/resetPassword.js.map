{"version":3,"file":"resetPassword.js","sourceRoot":"src/","sources":["components/Auth/controllers/resetPassword.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,sDAEiC;AAEjC,6DAAoC;AACpC,+DAAsC;AAEtC,SAAe,aAAa,CAAC,GAAa,EAAE,GAAa;;QACvD,MAAM,EAAE,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,GACpC,GAAG,CAAC,IAAI,CAAC;QAEX,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,2BAA2B;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,GAAG,GAAG,MAAM,mBAAQ,CAAC,OAAO,CAAC;gBACjC,IAAI,EAAE,YAAY,CAAC,GAAG;gBACtB,OAAO,EAAE,gBAAgB;gBACzB,IAAI;gBACJ,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YACH,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,OAAO,IAAA,0BAAe,EAAC;oBACrB,GAAG;oBACH,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,0BAA0B;iBACpC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,mBAAQ,CAAC,UAAU,CAAC;gBACxB,IAAI,EAAE,YAAY,CAAC,GAAG;gBACtB,OAAO,EAAE,gBAAgB;aAC1B,CAAC,CAAC;YAEH,YAAY,CAAC,QAAQ,GAAG,eAAe,CAAC;YACxC,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;YAE1B,OAAO,IAAA,0BAAe,EAAC;gBACrB,GAAG;gBACH,OAAO,EAAE,2CAA2C;aACrD,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,0BAAe,EAAC;gBACd,GAAG;gBACH,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,aAAa,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { z } from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport {\n  responseHandler,\n} from \"../../../utils/response\";\nimport { resetPasswordSchema } from \"../auth.validators\";\nimport OtpModel from \"../otp.model\";\nimport AuthModel from \"../auth.model\";\n\nasync function resetPassword(req: IRequest, res: Response) {\n  const { email, confirmPassword, code }: z.infer<typeof resetPasswordSchema> =\n    req.body;\n\n  try {\n    const existingUser = await AuthModel.findOne({ email });\n    if (!existingUser) {\n      return responseHandler({\n        res,\n        status: 401,\n        message: \"Invalid login credentials\",\n      });\n    }\n\n    const otp = await OtpModel.findOne({\n      User: existingUser._id,\n      purpose: \"reset_password\",\n      code,\n      isVerified: true,\n    });\n    if (!otp) {\n      return responseHandler({\n        res,\n        status: 400,\n        message: \"pls, verify password otp\",\n      });\n    }\n\n    await OtpModel.deleteMany({\n      User: existingUser._id,\n      purpose: \"reset_password\",\n    });\n\n    existingUser.password = confirmPassword;\n    await existingUser.save();\n\n    return responseHandler({\n      res,\n      message: \"password changed successfully, pls log in\",\n    });\n  } catch (err) {\n    responseHandler({\n      res,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default resetPassword;\n"]}