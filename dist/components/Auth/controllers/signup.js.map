{"version":3,"file":"signup.js","sourceRoot":"src/","sources":["components/Auth/controllers/signup.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,uCAAwC;AAGxC,sDAGiC;AACjC,wEAA+C;AAE/C,+DAAsC;AAGtC,SAAe,MAAM,CAAC,GAAa,EAAE,GAAa;;QAChD,MAAM,EACJ,SAAS,EACT,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,OAAO,GACR,GAAiC,GAAG,CAAC,IAAI,CAAC;QAE3C,MAAM,OAAO,GAAG,MAAM,IAAA,uBAAY,GAAE,CAAC;QACrC,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAE3B,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,oBAAS,CAAC,OAAO,CAAC;gBAC3C,KAAK;aACN,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAEpB,IAAI,YAAY,EAAE,CAAC;gBACjB,OAAO,IAAA,mCAAwB,EAAC;oBAC9B,GAAG;oBACH,OAAO,EAAE,8CAA8C;oBACvD,MAAM,EAAE,GAAG;oBACX,OAAO;iBACR,CAAC,CAAC;YACL,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,oBAAS,CAAC;gBAClC,SAAS;gBACT,QAAQ;gBACR,OAAO;gBACP,KAAK;aACN,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YAErB,MAAM,IAAI,oBAAS,CAAC;gBAClB,IAAI,EAAE,OAAO,CAAC,GAAG;gBACjB,QAAQ;gBACR,UAAU,EAAE,IAAI;gBAChB,IAAI,EAAE,MAAM;aACb,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;YAErB,OAAO,IAAA,oCAAyB,EAAC;gBAC/B,GAAG;gBACH,OAAO;gBACP,OAAO,EAAE,+BAA+B;aACzC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAA,mCAAwB,EAAC;gBACvB,GAAG;gBACH,OAAO;gBACP,GAAG;gBACH,OAAO,EAAE,2BAA2B,GAAG,CAAC,OAAO,EAAE;gBACjD,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CAAA;AAED,kBAAe,MAAM,CAAC","sourcesContent":["import { Response } from \"express\";\nimport { startSession } from \"mongoose\";\nimport { z } from \"zod\";\n\nimport {\n  abortSessionWithResponse,\n  commitSessionWithResponse,\n} from \"../../../utils/response\";\nimport UserModel from \"../../Users/user.model\";\nimport { signUpSchema } from \"../auth.validators\";\nimport AuthModel from \"../auth.model\";\nimport { IRequest } from \"../../../utils/types\";\n\nasync function signUp(req: IRequest, res: Response) {\n  const {\n    firstName,\n    lastName,\n    email,\n    password,\n    phoneNo,\n  }: z.infer<typeof signUpSchema> = req.body;\n\n  const session = await startSession();\n  session.startTransaction();\n\n  try {\n    const existingUser = await UserModel.findOne({\n      email,\n    }).session(session);\n\n    if (existingUser) {\n      return abortSessionWithResponse({\n        res,\n        message: \"Account already exists,please Login instead \",\n        status: 409,\n        session,\n      });\n    }\n\n    const newUser = await new UserModel({\n      firstName,\n      lastName,\n      phoneNo,\n      email,\n    }).save({ session });\n\n    await new AuthModel({\n      User: newUser._id,\n      password,\n      isVerified: true,\n      role: \"user\",\n    }).save({ session });\n\n    return commitSessionWithResponse({\n      res,\n      session,\n      message: \"account created, please login\",\n    });\n  } catch (err) {\n    abortSessionWithResponse({\n      res,\n      session,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default signUp;\n"]}