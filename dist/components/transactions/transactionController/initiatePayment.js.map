{"version":3,"file":"initiatePayment.js","sourceRoot":"src/","sources":["components/transactions/transactionController/initiatePayment.ts"],"names":[],"mappings":"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","sourcesContent":["import { Response } from \"express\";\nimport { z } from \"zod\";\nimport Currency from \"currency.js\";\n\nimport { initiatePaymentSchema } from \"../transaction.validators\";\nimport { responseHandler } from \"../../../utils/response\";\nimport { IRequest } from \"../../../utils/types\";\nimport ProductModel from \"../../Products/product.model\";\nimport axios from \"axios\";\nimport appConfig from \"../../../configs\";\nimport TxModel from \"../transaction.model\";\nimport { createCustomer, initializePayment } from \"../transaction.utils\";\n\nasync function initiatePayment(req: IRequest, res: Response) {\n  const { paystackSecret } = appConfig;\n  const { userAuth } = req;\n\n  const {\n    idempotencyKey,\n    productId,\n    currency,\n    quantity,\n  }: z.infer<typeof initiatePaymentSchema> = req.body;\n\n  try {\n    const product = await ProductModel.findById(productId);\n    if (!product)\n      return responseHandler({\n        res,\n        message: \"product not found\",\n        status: 404,\n      });\n\n    if (String(product.User) === String(userAuth._id))\n      return responseHandler({\n        res,\n        message: \"you can not buy your own product\",\n        status: 400,\n      });\n\n    if (product.quantityInStock < 1 || quantity > product.quantityInStock)\n      return responseHandler({\n        res,\n        message: \"product is out of stock or quantity is too high\",\n        status: 400,\n      });\n\n    const paymentExists = await TxModel.findOne({\n      Product: productId,\n      idempotencyKey,\n      status: \"successful\",\n    });\n    if (paymentExists)\n      return responseHandler({\n        res,\n        message: \"This payment has already been completed\",\n        status: 400,\n      });\n\n    const amount = Currency(product.price).multiply(quantity).value;\n\n    //create customer\n    await createCustomer(userAuth);\n\n    const payload = {\n      email: userAuth.email,\n      amount: `${amount}00`,\n      currency,\n    };\n\n    const data = await initializePayment(payload);\n\n    if (data.status) {\n      await new TxModel({\n        Buyer: userAuth._id,\n        Supplier: product.User,\n        idempotencyKey,\n        Product: productId,\n        unitPrice: product.price,\n        totalPrice: amount,\n        status: \"pending\",\n        currency,\n        quantity,\n        paymentReference: data.data.reference,\n        paymentLink: data.data.authorization_url,\n      }).save();\n    }\n\n    return responseHandler({\n      res,\n      message: \"successful\",\n      data,\n    });\n  } catch (err) {\n    responseHandler({\n      res,\n      err,\n      message: `Internal Server Error:  ${err.message}`,\n      status: 500,\n    });\n  }\n}\n\nexport default initiatePayment;\n"]}